{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.7",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@todo",
          "syntaxKind": "block",
          "allowMultiple": true
        }
      ],
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://ragnar-oock.github.io/zoram/api-reference",
  "kind": "Package",
  "canonicalReference": "@zoram/core!",
  "docComment": "",
  "name": "@zoram/core",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@zoram/core!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addPlugin:function(1)",
          "docComment": "/**\n * Register a plugin into the active application after it has been initialized.\n *\n * @param definePlugin - the plugin definition to register in the application.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addPlugin(definePlugin: "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/add-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "definePlugin",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "addPlugin"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addPlugin:function(2)",
          "docComment": "/**\n * Register a plugin into the active application after it has been initialized.\n *\n * @param definePlugin - the plugin definition to register in the application.\n *\n * @param app - the application to register the plugin into, you should not need to pass this argument in normal use\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addPlugin(definePlugin: "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": ", app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/add-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "definePlugin",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addPlugin"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addPlugins:function(1)",
          "docComment": "/**\n * Register a set of plugins into the active application after it has been initialized.\n *\n * @param definePlugins - the plugin definitions to register in the application\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addPlugins(definePlugins: "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/add-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "definePlugins",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "addPlugins"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addPlugins:function(2)",
          "docComment": "/**\n * Register a set of plugins into the active application after it has been initialized.\n *\n * @param definePlugins - the plugin definitions to register in the application\n *\n * @param app - the application to register the plugin into, you should not need to pass this argument in normal use\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addPlugins(definePlugins: "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/add-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "definePlugins",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "addPlugins"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addService:function(1)",
          "docComment": "/**\n * Register a service the depends on another or on the application.\n *\n * @param id - the id to register the service under, **MUST** be unique\n *\n * @param serviceFactory - a function taking in the application instance and returning a ready to use service\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addService<id extends "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ">(id: "
            },
            {
              "kind": "Content",
              "text": "id"
            },
            {
              "kind": "Content",
              "text": ", serviceFactory: "
            },
            {
              "kind": "Reference",
              "text": "ServiceFactory",
              "canonicalReference": "@zoram/core!ServiceFactory:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": "[id]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/add-service.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "serviceFactory",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "id",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addService"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!addService:function(2)",
          "docComment": "/**\n * Register a self-contained service with no dependency.\n *\n * @param id - the id to register the service under, **MUST** be unique\n *\n * @param service - a ready to use service instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addService<id extends "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ">(id: "
            },
            {
              "kind": "Content",
              "text": "id"
            },
            {
              "kind": "Content",
              "text": ", service: "
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": "[id]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/add-service.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "service",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "id",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addService"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!Application:type",
          "docComment": "/**\n * An application instance as returned by {@link import('@zoram/core').createApp `createApp`}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Application = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly id: string;\n    readonly emitter: "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApplicationHooks",
              "canonicalReference": "@zoram/core!ApplicationHooks:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly services: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    ["
            },
            {
              "kind": "Reference",
              "text": "pluginSymbol",
              "canonicalReference": "@zoram/core!~pluginSymbol:var"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly options: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApplicationOptions",
              "canonicalReference": "@zoram/core!ApplicationOptions:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    alive: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/application.type.ts",
          "releaseTag": "Public",
          "name": "Application",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ApplicationHooks:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationHooks = "
            },
            {
              "kind": "Reference",
              "text": "ApplicationServiceHooks",
              "canonicalReference": "@zoram/core!ApplicationServiceHooks:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ApplicationPluginHooks",
              "canonicalReference": "@zoram/core!ApplicationPluginHooks:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/application.type.ts",
          "releaseTag": "Public",
          "name": "ApplicationHooks",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ApplicationOptions:type",
          "docComment": "/**\n * Optional configuration options for an application.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    id: string;\n    onError: (error: unknown) => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/application.type.ts",
          "releaseTag": "Public",
          "name": "ApplicationOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ApplicationPluginEvent:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationPluginEvent = "
            },
            {
              "kind": "Content",
              "text": "{\n    app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n    plugin: "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/application.type.ts",
          "releaseTag": "Public",
          "name": "ApplicationPluginEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ApplicationPluginHooks:type",
          "docComment": "/**\n * Plugin related hooks emitted by the application.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationPluginHooks = "
            },
            {
              "kind": "Content",
              "text": "{\n    beforePluginRegistration: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationPluginEvent",
              "canonicalReference": "@zoram/core!ApplicationPluginEvent:type"
            },
            {
              "kind": "Content",
              "text": ";\n    pluginRegistered: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationPluginEvent",
              "canonicalReference": "@zoram/core!ApplicationPluginEvent:type"
            },
            {
              "kind": "Content",
              "text": ";\n    beforePluginRemoved: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationPluginEvent",
              "canonicalReference": "@zoram/core!ApplicationPluginEvent:type"
            },
            {
              "kind": "Content",
              "text": ";\n    pluginRemoved: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationPluginEvent",
              "canonicalReference": "@zoram/core!ApplicationPluginEvent:type"
            },
            {
              "kind": "Content",
              "text": ";\n    failedPluginRegistration: {\n        app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n        reason: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/plugin-hooks.type.ts",
          "releaseTag": "Public",
          "name": "ApplicationPluginHooks",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ApplicationServiceHooks:type",
          "docComment": "/**\n * Service related hooks emitted by the application.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationServiceHooks = "
            },
            {
              "kind": "Content",
              "text": "{\n    beforeServiceAdded: {\n        app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n        service: "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": ";\n        serviceId: "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    serviceAdded: {\n        app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n        service: "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": ";\n        serviceId: "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    beforeServiceRemoved: {\n        app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n        serviceId: "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ";\n        service: "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    serviceRemoved: {\n        app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";\n        serviceId: "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/services.type.ts",
          "releaseTag": "Public",
          "name": "ApplicationServiceHooks",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 24
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!createApp:function(1)",
          "docComment": "/**\n * Create an application from a set of plugins\n *\n * @param plugins - the plugin list to create the application from\n *\n * @param options - a set of options to configure how the application functions\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createApp(plugins: "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApplicationOptions",
              "canonicalReference": "@zoram/core!ApplicationOptions:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/create-app.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "plugins",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "createApp"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!defineAsyncPlugin:function(1)",
          "docComment": "/**\n * Load a set of plugins in the application when a condition is met\n *\n * @param importer - a function to load the plugins asynchronously\n *\n * @param when - the condition to await\n *\n * @param dependencies - a list of plugins that the condition depends on\n *\n * @param done - called once the plugins are added to the app, only used during testing\n *\n * @returns a plugin to set up the condition and load the plugin when it is met\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defineAsyncPlugin(importer: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OneOrMore",
              "canonicalReference": "@zoram/core!OneOrMore:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ", when: "
            },
            {
              "kind": "Content",
              "text": "(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ", dependencies?: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", done?: "
            },
            {
              "kind": "Content",
              "text": "(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ", plugin: "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/define-async-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 24,
            "endIndex": 25
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "importer",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "when",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 14
              },
              "isOptional": false
            },
            {
              "parameterName": "dependencies",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            },
            {
              "parameterName": "done",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 23
              },
              "isOptional": true
            }
          ],
          "name": "defineAsyncPlugin"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!DefinedPlugin:type",
          "docComment": "/**\n * An instance of a plugin as returned by a {@link PluginDefinition `PluginDefinition`}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DefinedPlugin = "
            },
            {
              "kind": "Content",
              "text": "{\n    id: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    dependencies: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    hooks: "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "_PluginHooks",
              "canonicalReference": "@zoram/core!_PluginHooks:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    phase: "
            },
            {
              "kind": "Reference",
              "text": "PluginPhase",
              "canonicalReference": "@zoram/core!PluginPhase:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/plugin.type.ts",
          "releaseTag": "Public",
          "name": "DefinedPlugin",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!definePlugin:function(1)",
          "docComment": "/**\n * Define an anonymous plugin using a generated id\n *\n * @param setup - the plugin setup function\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function definePlugin(setup: "
            },
            {
              "kind": "Reference",
              "text": "PluginSetup",
              "canonicalReference": "@zoram/core!PluginSetup:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "setup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "definePlugin"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!definePlugin:function(2)",
          "docComment": "/**\n * Define a named plugin using a provided name.\n *\n * @param name - the name of the plugin to recognize it by in logs, errors and tools. Will be used as the description of the symbol used for identifying the plugin.\n *\n * @param setup - the plugin setup function\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function definePlugin(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", setup: "
            },
            {
              "kind": "Reference",
              "text": "PluginSetup",
              "canonicalReference": "@zoram/core!PluginSetup:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PluginDefinition",
              "canonicalReference": "@zoram/core!PluginDefinition:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "setup",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "definePlugin"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!defineService:function(1)",
          "docComment": "/**\n * Define a stateless service, also known as `Topic`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defineService<notification extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, never>"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": "<notification>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/define-service.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "notification",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "name": "defineService"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!defineService:function(2)",
          "docComment": "/**\n * Define a stateful service.\n *\n * @param setup - a service setup function, the object returned by this function will be used as the base for the derived service instances\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defineService<notification extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, never>"
            },
            {
              "kind": "Content",
              "text": ", service extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">(setup: "
            },
            {
              "kind": "Content",
              "text": "(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ", emitter: "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<notification & "
            },
            {
              "kind": "Reference",
              "text": "ServiceNotifications",
              "canonicalReference": "@zoram/core!ServiceNotifications:interface"
            },
            {
              "kind": "Content",
              "text": ">) => service"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": "<notification> & service"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/define-service.ts",
          "returnTypeTokenRange": {
            "startIndex": 21,
            "endIndex": 26
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "setup",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 20
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "notification",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            },
            {
              "typeParameterName": "service",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "defineService"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!dependsOn:function(1)",
          "docComment": "/**\n * Mark the plugin as depending on the given dependency.\n *\n * @param dependency - the id of the other plugin you depend on. Make sure to have at least one import in your module pointing to the dependency so typescript knows to load its types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dependsOn(dependency: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/depends-on.composable.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dependency",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "dependsOn"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!destroyApp:function(1)",
          "docComment": "/**\n * Tear down an application and it's plugins\n *\n * @param app - the application to destroy\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function destroyApp(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/application/create-app.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "destroyApp"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!EventCleanup:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventCleanup = "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "EventCleanup",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!EventSource_2:type",
          "docComment": "/**\n * A direct emitter.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventSource<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<notifications>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "EventSource_2",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!EventSourceContainer:type",
          "docComment": "/**\n * An object holding an emitter, usually an application instance or service instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventSourceContainer<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    emitter: "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<notifications>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "EventSourceContainer",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!EventSourceGetter:type",
          "docComment": "/**\n * A function returning a direct emitter or an object holding an emitter. The application passed as parameter is the current application context `onEvent` is called as part of.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventSourceGetter<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "((application: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => ("
            },
            {
              "kind": "Reference",
              "text": "EventSource",
              "canonicalReference": "@zoram/core!EventSource_2:type"
            },
            {
              "kind": "Content",
              "text": "<notifications> | "
            },
            {
              "kind": "Reference",
              "text": "EventSourceContainer",
              "canonicalReference": "@zoram/core!EventSourceContainer:type"
            },
            {
              "kind": "Content",
              "text": "<notifications>))"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "EventSourceGetter",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!EventTarget_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventTarget<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "EventSource",
              "canonicalReference": "@zoram/core!EventSource_2:type"
            },
            {
              "kind": "Content",
              "text": "<notifications> | "
            },
            {
              "kind": "Reference",
              "text": "EventSourceContainer",
              "canonicalReference": "@zoram/core!EventSourceContainer:type"
            },
            {
              "kind": "Content",
              "text": "<notifications> | "
            },
            {
              "kind": "Reference",
              "text": "EventSourceGetter",
              "canonicalReference": "@zoram/core!EventSourceGetter:type"
            },
            {
              "kind": "Content",
              "text": "<notifications> | "
            },
            {
              "kind": "Reference",
              "text": "ServiceId",
              "canonicalReference": "@zoram/core!ServiceId:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "EventTarget_2",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!MergedEvents:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MergedEvents<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": ", events extends "
            },
            {
              "kind": "Content",
              "text": "(keyof notifications)[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "UnionToIntersection",
              "canonicalReference": "@zoram/core!UnionToIntersection:type"
            },
            {
              "kind": "Content",
              "text": "<notifications[events[number]]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "MergedEvents",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "events",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!Notifications:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Notifications = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventType",
              "canonicalReference": "mitt!EventType:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "Notifications",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onBeforeCreate:function(1)",
          "docComment": "/**\n * Add a callback to be called between the dependency resolution and adding the plugins to the application\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "onBeforeCreate: (callback: "
            },
            {
              "kind": "Content",
              "text": "((app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => void)"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "void"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin-hooks.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "onBeforeCreate"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onBeforeDestroy:function(1)",
          "docComment": "/**\n * Add a callback to be called before the plugin is removed from the application\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "onBeforeDestroy: (callback: "
            },
            {
              "kind": "Content",
              "text": "((app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => void)"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "void"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin-hooks.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "onBeforeDestroy"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onCreated:function(1)",
          "docComment": "/**\n * Add a callback to be called when the plugin is added to the application\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "onCreated: (callback: "
            },
            {
              "kind": "Content",
              "text": "((app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => void)"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "void"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin-hooks.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "onCreated"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!OneOrMore:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OneOrMore<item> = "
            },
            {
              "kind": "Content",
              "text": "item | [item, ...item[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/array.helper.ts",
          "releaseTag": "Public",
          "name": "OneOrMore",
          "typeParameters": [
            {
              "typeParameterName": "item",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onEvent:function(1)",
          "docComment": "/**\n * Listen to multiple events the same source at once and cleanly stop to listen when the plugin is disposed off.\n *\n * @param target - something to listen events on\n *\n * @param on - a list of events to listen to\n *\n * @param handler - callback to invoke when any of the events in `on` is emitted by `target`\n *\n * @example\n * ```ts\n * // target getter\n * onEvent(app => app.services.myService, ['an-event', 'another-event'], console.log);\n * onEvent(({services}) => services.myService, ['an-event', 'another-event'], console.log);\n * // direct target\n * onEvent(myCustomEmitter, ['an-event', 'another-event'], console.log);\n * // service id\n * onEvent('myService', ['an-event', 'another-event'], console.log);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onEvent<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": ", events extends "
            },
            {
              "kind": "Content",
              "text": "(keyof notifications)[]"
            },
            {
              "kind": "Content",
              "text": ">(target: "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "@zoram/core!EventTarget_2:type"
            },
            {
              "kind": "Content",
              "text": "<notifications>"
            },
            {
              "kind": "Content",
              "text": ", on: "
            },
            {
              "kind": "Content",
              "text": "events"
            },
            {
              "kind": "Content",
              "text": ", handler: "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "mitt!Handler:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MergedEvents",
              "canonicalReference": "@zoram/core!MergedEvents:type"
            },
            {
              "kind": "Content",
              "text": "<notifications, events>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EventCleanup",
              "canonicalReference": "@zoram/core!EventCleanup:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "on",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "events",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "onEvent"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onEvent:function(2)",
          "docComment": "/**\n * Listen to all the events of a source at once and cleanly stop to listen when the plugin is disposed off.\n *\n * Only use this overload when you need to listen to all the events, if you need to listen to just a subset of the events consider passing an array of those events.\n *\n * @param target - something to listen events on\n *\n * @param on - ask to subscribe to everything\n *\n * @param handler - callback to invoke when any event is emitted by `target`\n *\n * @example\n * ```ts\n * // target getter\n * onEvent(app => app.services.myService, '*', console.log);\n * onEvent(({services}) => services.myService, '*', console.log);\n * // direct target\n * onEvent(myCustomEmitter, '*', console.log);\n * // service id\n * onEvent('myService', '*', console.log);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onEvent<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": ">(target: "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "@zoram/core!EventTarget_2:type"
            },
            {
              "kind": "Content",
              "text": "<notifications>"
            },
            {
              "kind": "Content",
              "text": ", on: "
            },
            {
              "kind": "Content",
              "text": "'*'"
            },
            {
              "kind": "Content",
              "text": ", handler: "
            },
            {
              "kind": "Reference",
              "text": "WildcardHandler",
              "canonicalReference": "mitt!WildcardHandler:type"
            },
            {
              "kind": "Content",
              "text": "<notifications>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EventCleanup",
              "canonicalReference": "@zoram/core!EventCleanup:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "on",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "onEvent"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!onEvent:function(3)",
          "docComment": "/**\n * Listen to a specific event of a source and cleanly stop to listen when the plugin is disposed of.\n *\n * @param target - target something to listen events on\n *\n * @param on - the name of the event to listen to\n *\n * @param handler - callback to invoke when the event is emitted by `target`\n *\n * @example\n * ```ts\n * // target getter\n * onEvent(app => app.services.myService, 'an-event', console.log);\n * onEvent(({services}) => services.myService, 'an-event', console.log);\n * // direct target\n * onEvent(myCustomEmitter, 'an-event', console.log);\n * // service id\n * onEvent('myService', 'an-event', console.log);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onEvent<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Notifications",
              "canonicalReference": "@zoram/core!Notifications:type"
            },
            {
              "kind": "Content",
              "text": ", event extends "
            },
            {
              "kind": "Content",
              "text": "keyof notifications"
            },
            {
              "kind": "Content",
              "text": ">(target: "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "@zoram/core!EventTarget_2:type"
            },
            {
              "kind": "Content",
              "text": "<notifications>"
            },
            {
              "kind": "Content",
              "text": ", on: "
            },
            {
              "kind": "Content",
              "text": "event"
            },
            {
              "kind": "Content",
              "text": ", handler: "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "mitt!Handler:type"
            },
            {
              "kind": "Content",
              "text": "<notifications[event]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EventCleanup",
              "canonicalReference": "@zoram/core!EventCleanup:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "on",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "event",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "onEvent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!PluginDefinition:type",
          "docComment": "/**\n * A factory function that returns a defined plugin ready to be added to an application.\n *\n * @see\n *\n * definePlugin\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginDefinition = "
            },
            {
              "kind": "Content",
              "text": "{\n    (): "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": ";\n    id: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin.ts",
          "releaseTag": "Public",
          "name": "PluginDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!PluginHook:type",
          "docComment": "/**\n * Implements life cycles for the plugin.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginHook = "
            },
            {
              "kind": "Content",
              "text": "(app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/plugin-hooks.type.ts",
          "releaseTag": "Public",
          "name": "PluginHook",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!PluginId:type",
          "docComment": "/**\n * A plugin's unique identifier.\n *\n * ⚠️ Do not mistake this with {@link definePlugin `definePlugin`}'s `name` parameter.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginId = "
            },
            {
              "kind": "Content",
              "text": "symbol"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/plugin.type.ts",
          "releaseTag": "Public",
          "name": "PluginId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!PluginPhase:type",
          "docComment": "/**\n * The phase of the plugin during it's life cycle, phase transition can only occur in one order and always lead to a hook being played. Phase order is as follows : 1. **setup**: the plugin is getting build, this is when the `setup` function provided to {@link definePlugin `definePlugin`} is invoked. 2. **mount**: the plugin is in the process of registering in the application, this is a transient state 3. **active**: the plugin's main phase where it will stay for the most time 4. **teardown**: the cleanup phase before the plugin is removed from the application 5. **destroyed**: the plugin has been removed from the application, it should not be used anymore and references to it should be removed so it can be garbage collected\n *\n * @see\n *\n * {@link _PluginHooks} for details on the hooks emitted for each transition\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginPhase = "
            },
            {
              "kind": "Content",
              "text": "'setup' | 'mount' | 'active' | 'teardown' | 'destroyed'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/plugin.type.ts",
          "releaseTag": "Public",
          "name": "PluginPhase",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!PluginSetup:type",
          "docComment": "/**\n * Describes how a plugin is created.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginSetup = "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/define-plugin.ts",
          "releaseTag": "Public",
          "name": "PluginSetup",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!removePlugin:function(1)",
          "docComment": "/**\n * Remove a plugin and all those depending on it in reverse topological order.\n *\n * @param idOrPlugin - the plugin to remove or its id\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removePlugin(idOrPlugin: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/remove-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "idOrPlugin",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "removePlugin"
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!removePlugin:function(2)",
          "docComment": "/**\n * Remove a plugin and all those depending on it in reverse topological order.\n *\n * @param idOrPlugin - the plugin to remove or its id\n *\n * @param app - the app to remove the plugin from\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removePlugin(idOrPlugin: "
            },
            {
              "kind": "Reference",
              "text": "PluginId",
              "canonicalReference": "@zoram/core!PluginId:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DefinedPlugin",
              "canonicalReference": "@zoram/core!DefinedPlugin:type"
            },
            {
              "kind": "Content",
              "text": ", app: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/remove-plugin.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "idOrPlugin",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "removePlugin"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@zoram/core!Service:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Service<notifications extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/services/services.type.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "notifications",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "name": "Service",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@zoram/core!Service#emitter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitter: "
                },
                {
                  "kind": "Reference",
                  "text": "Emitter",
                  "canonicalReference": "mitt!Emitter:interface"
                },
                {
                  "kind": "Content",
                  "text": "<notifications & "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceNotifications",
                  "canonicalReference": "@zoram/core!ServiceNotifications:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emitter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@zoram/core!ServiceCollection:interface",
          "docComment": "/**\n * Register your service in this interface by augmenting it\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ServiceCollection "
            }
          ],
          "fileUrlPath": "src/application/application.type.ts",
          "releaseTag": "Public",
          "name": "ServiceCollection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@zoram/core!ServiceCollection:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[id: "
                },
                {
                  "kind": "Content",
                  "text": "string | symbol"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Service",
                  "canonicalReference": "@zoram/core!Service:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ServiceFactory:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ServiceFactory<service extends "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@zoram/core!Service:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(application: "
            },
            {
              "kind": "Reference",
              "text": "Application",
              "canonicalReference": "@zoram/core!Application:type"
            },
            {
              "kind": "Content",
              "text": ") => service"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/add-service.ts",
          "releaseTag": "Public",
          "name": "ServiceFactory",
          "typeParameters": [
            {
              "typeParameterName": "service",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!ServiceId:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ServiceId = "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": " & (symbol | string)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/services.type.ts",
          "releaseTag": "Public",
          "name": "ServiceId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@zoram/core!ServiceNotifications:interface",
          "docComment": "/**\n * Events that all {@link Service `services`} are subject to emit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ServiceNotifications "
            }
          ],
          "fileUrlPath": "src/services/services.type.ts",
          "releaseTag": "Public",
          "name": "ServiceNotifications",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@zoram/core!ServiceNotifications:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[x: "
                },
                {
                  "kind": "Content",
                  "text": "string | symbol"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@zoram/core!ServiceNotifications#before_destroy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'before_destroy': "
                },
                {
                  "kind": "Content",
                  "text": "{\n        service: "
                },
                {
                  "kind": "Reference",
                  "text": "Service",
                  "canonicalReference": "@zoram/core!Service:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "before_destroy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@zoram/core!UnionToIntersection:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnionToIntersection<U> = "
            },
            {
              "kind": "Content",
              "text": "(U extends any ? (x: U) => void : never) extends ((x: infer I) => void) ? I : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/plugins/on-event.composable.ts",
          "releaseTag": "Public",
          "name": "UnionToIntersection",
          "typeParameters": [
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@zoram/core!useService:function(1)",
          "docComment": "/**\n * @param serviceId - the id of the service to access\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useService<id extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": ">(serviceId: "
            },
            {
              "kind": "Content",
              "text": "id"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ServiceCollection",
              "canonicalReference": "@zoram/core!ServiceCollection:interface"
            },
            {
              "kind": "Content",
              "text": "[id]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/services/use-service.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "serviceId",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "id",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useService"
        }
      ]
    }
  ]
}
